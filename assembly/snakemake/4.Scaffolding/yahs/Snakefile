import os
import glob
import sys

configfile: "config.yaml"

prefix=config["prefix"]
tmpdir=os.getcwd()
output_yahs=prefix+"_scaffolds_final.fa"

rule all:
    input:
        output_yahs

rule index_genome:
    input:
        ref=config["input_assembly"]
    output:
        fai=config["input_assembly"]+".fai",
        genome=config["input_assembly"]+".genome",
        bwt=config['input_assembly']+'.bwt.2bit.64',
    conda:
        "bwa-mem2"
    threads:
        1
    resources:
        mem_mb=100000
    shell:
        """
        samtools faidx {input.ref}
        awk "{{print \$1,\$2}}" {input.ref}.fai > {input.ref}.genome
        sed -i "s/ /\t/g" {input.ref}.genome
        bwa-mem2 index {input.ref}
        """

rule map_hic:
    input:
        bwt=config['input_assembly']+'.bwt.2bit.64',
        assembly=config["input_assembly"],
        reads_r1=expand("{dataset}_1.fastq.gz", dataset=config["SAMPLES"]),
        reads_r2=expand("{dataset}_2.fastq.gz", dataset=config["SAMPLES"])
    output:
        config["prefix"]+"_bwa.sam"
    resources:
        mem_mb=100000
    conda:
        "bwa-mem2"
    threads:
        config["threads"]
    shell:
        "echo {input.reads_r1} && echo {input.reads_r2} && bwa-mem2 mem -T0 -5SP -t {threads} -o {output} {input.assembly} <(cat {input.reads_r1}) <(cat {input.reads_r2})" 

rule parse_pairsam: 
    input:
        input_sam=config["prefix"]+"_bwa.sam",
        input_genome=config["input_assembly"]+".genome"
    output:
        config["prefix"]+"_bwa.parsed.pairsam"
    resources:
        mem_mb=100000
    conda:
        "pairtools"
    threads:
        config["threads"]
    shell:
        "pairtools parse --min-mapq 40 --walks-policy 5unique --max-inter-align-gap 30 --nproc-in {threads} --nproc-out {threads} --chroms-path {input.input_genome} {input.input_sam} > {output}"

rule sort_pairsam:
    input:
        config["prefix"]+"_bwa.parsed.pairsam"
    output:
        config["prefix"]+"_bwa.sorted.pairsam"
    resources:
        mem_mb=100000
    conda:
        "pairtools"
    threads:
        config["threads"]
    shell:
        "pairtools sort --nproc {threads} --tmpdir={tmpdir} {input} > {output}"

rule dedup_pairsam:
    input:
        config["prefix"]+"_bwa.sorted.pairsam"
    output:
        output_pairsam=config["prefix"]+"_bwa.dedup.pairsam",
        output_stats=config["prefix"]+".dedup.stats"
    resources:
        mem_mb=100000
    conda:
        "pairtools"
    threads:
        config["threads"]
    shell:
        "pairtools dedup --nproc-in {threads} --nproc-out {threads} --mark-dups --output-stats {output.output_stats} --output {output.output_pairsam} {input}"

rule split_pairsam:
    input:
        config["prefix"]+"_bwa.dedup.pairsam"
    output:
        output_pairs=config["prefix"]+"_bwa.dedup.pairs",
        output_bam=config["prefix"]+"_bwa.dedup.bam"
    resources:
        mem_mb=100000
    conda:
        "pairtools"
    threads:
        config["threads"]
    shell:
        "pairtools split --nproc-in {threads} --nproc-out {threads} --output-pairs {output.output_pairs} --output-sam {output.output_bam} {input}"

rule sort_bam:
    input:
        config["prefix"]+"_bwa.dedup.bam"
    output:
        config["prefix"]+"_bwa.dedup.sortname.bam"
    resources:
        mem_mb=100000
    conda:
        "pairtools"
    threads:
        config["threads"]
    shell:
        "samtools sort -@ {threads} -n -T {tmpdir} -o {output} {input}"

rule run_yahs:
    input:
        bam=config["prefix"]+"_bwa.dedup.sortname.bam",
        assembly=config["input_assembly"]
    output:
        config["prefix"]+"_scaffolds_final.fa"
    resources:
        mem_mb=100000
    conda:
        "yahs"
    threads:
        1
    shell:
        "yahs {input.assembly} {input.bam} -v 1 -o {prefix}"

